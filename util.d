/* Utility functions, mixins, constants and public imports of generally useful
 * Phobos modules.  These are not meant to be part of the public API.
 *
 * Copyright (C) 2010 David Simcha
 *
 * License:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
module plot2kill.util;

public import std.conv, std.math, std.array, std.range, std.algorithm,
    std.contracts, std.traits, std.stdio, std.string;

version(Windows) {
    // This should be available on all 32-bit versions of Windows.  It was
    // standard since Windows 3.1.
    immutable string defaultFont = "Arial";
} else version(Posix) {
    // This is an X11 core font, so it should be on pretty much any
    // non-embedded Posix system.
    immutable string defaultFont = "Helvetica";
} else {
    // Are non-ancient Macs Posix?  I hope so.
    static assert(0, "Don't know what a sane default font is for this platform.");
}

package double toSigFigs(double num, int nSigFigs)
in {
    assert(nSigFigs > 0);
} body {
    if(num == 0 || !isFinite(num)) {
        return num;
    }

    auto nZeros = to!int(log10(num)) - nSigFigs + 1;
    auto divisor = pow(10.0, nZeros);
    auto rounded = round(num / divisor);
    if(rounded == 0) {
        divisor /= 10;
        rounded = round(num / divisor);
    }

    return rounded * divisor;
}

unittest {
    assert(approxEqual(toSigFigs(0.001325356446, 1), 0.001));
    assert(approxEqual(toSigFigs(PI, 3), 3.14));
}

package enum toPixels = q{
    int toPixelsX(double inUnits) {
        immutable xRange = rightLim - leftLim;
        assert(xRange > 0);

        immutable fract = (inUnits - leftLim) / xRange;
        immutable ret = roundTo!int(fract * plotWidth) + leftMargin;
        return ret;
    }

    int toPixelsY(double inUnits) {
        immutable yRange = upperLim - lowerLim;
        assert(yRange > 0);

        immutable fract = (upperLim - inUnits) / yRange;
        immutable ret = roundTo!int(fract * plotHeight) + topMargin;
        return ret;
    }
};

package enum drawErrorMixin = q{
    void drawErrorBar(Pen pen, double x, double from, double to, double width) {
        immutable xPixels = toPixelsX(x);
        immutable fromPixels = toPixelsY(from);
        immutable toPixels = toPixelsY(to);
        immutable horizLeft = toPixelsX(x - width / 2);
        immutable horizRight = toPixelsX(x + width / 2);

        form.drawClippedLine(pen, Point(xPixels, fromPixels),
                             Point(xPixels, toPixels));
        form.drawClippedLine(pen, Point(horizLeft, toPixels),
                             Point(horizRight, toPixels));
    }
};

/* Converts an array of doubles to strings, rounding off numbers very close
 * to zero.
 */
package string[] doublesToStrings(double[] arr) {
    auto ret = new string[arr.length];
    foreach(i, elem; arr) {
        ret[i] = (abs(elem) > 1e-10) ? to!string(elem) : "0";
    }
    return ret;
}

double[] toDoubleArray(R)(R range) {
    double[] ret;
    static if(std.range.hasLength!R) {{
        ret.length = range.length;
        size_t i = 0;
        foreach(elem; range) {
            ret[i] = elem;
            i++;
        }
    }} else {
        foreach(elem; range) {
            ret ~= elem;
        }
    }

    return ret;
}

// This can't be in the base class mixin because having return this; return
// an instance of a base class (FigureBase, etc.) instead of Subplot or Figure
// would break the fluent interface.  Making it a mixin instead.
enum string labelStuff = q{
private:
    // All this font stuff appears on both Figures and Subplots for all GUI
    // toolkits.
    string _title;
    string _xLabel;
    string _yLabel;
    Font _titleFont;
    Font _xLabelFont;
    Font _yLabelFont;
public:
    ///
    final string title() {
        return _title;
    }

    ///
    final typeof(this) title(string newTitle) {
        _title = newTitle;
        return this;
    }

    ///
    final string xLabel() {
        return _xLabel;
    }

    ///
    final typeof(this) xLabel(string newLabel) {
        _xLabel = newLabel;
        return this;
    }

    ///
    final string yLabel() {
        return _yLabel;
    }

    ///
    final typeof(this) yLabel(string newLabel) {
        _yLabel = newLabel;
        return this;
    }

    ///
    final Font titleFont() {
        return _titleFont;
    }

    ///
    final typeof(this) titleFont(Font newTitleFont) {
        _titleFont = newTitleFont;
        return this;
    }

    ///
    final Font xLabelFont() {
        return _xLabelFont;
    }

    ///
    final typeof(this) xLabelFont(Font newLabelFont) {
        _xLabelFont = newLabelFont;
        return this;
    }

    ///
    final Font yLabelFont() {
        return _yLabelFont;
    }

    ///
    final typeof(this) yLabelFont(Font newLabelFont) {
        _yLabelFont = newLabelFont;
        return this;
    }
};

// This will probably grow somewhat, I'm making a mixin now in anticipation.
enum string GuiAgnosticBaseMixin = q{
protected:
    // These control where on the drawing object the figure is drawn.
    int xOffset;
    int yOffset;

    // These control the width and height that we assume we're drawing to.
    int _width;
    int _height;

// Make sure that unless the users of this mixin declare otherwise,
// accessibility is the usual default.
public:
};
